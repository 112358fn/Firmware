---------------------------
Description
---------------------------

Static configuration:
----------------------

the following is the parameter configuration to be used with this PWM

typedef struct PWM_PushPull {

	/* which outputs of type SCT_OUT should be steered in the odd period */
	uint16_t 		outputMaskOdd;		
	
	/* which outputs of type SCT_OUT should be steered in the even period */	
	uint16_t 		outputMaskEven;			
	
	/* on which SCT output (internal) the period shall be tracked */
	/* this signal is reserved and cannot be used for the outputs */
	SCT_OUT 		oddPeriod;
	
	/* which interrupts should be active */		
	uint16_t  		interruptMask;	
	
	/* value in percentage per mil (n/1000) */
	uint16_t 		dutyCycle;		
	
	/* value in Hz */	
	uint32_t 		period;			
	
	/* active high or active low */
	PWM_polarity	polarity;		
	
	/* rising edge, falling edge, period event interrupt callbacks */
	intCallback_t	risingEdgeInt;	
	intCallback_t	fallingEdgeInt;	
	intCallback_t	periodInt;		

} PWM_PushPull;

@outputMaskOdd
@outputMaskEven
	defines which outputs shall be driven and is a bit mask, bit zero relates to SCT_OUT0 and 
	bit 15 to SCT_OUT_16. Each output in outputMaskOdd is driven during odd periods, each output in 
	outputMaskEven is driven in even periods

@oddPeriod
	internal output signal which is used to track in hardware the even and odd periods. One SCT output
	signal needs to be reserved for this purpose

@interruptMask
	can take the values RISING_INT, FALLING_INT, PERIOD_INT or an OR combination of them

@ duty cycle
	is represented 'per mil', so 1000 represents 100% duty cycle, 500 represents 50%, 101 represents 
	10,1% and so on

@ period
	represents the base frequency in Herz at which the PWM is generated, i.e. the period frequency

@polarity
	defines if the PWM signal should start active high or low at the beginning of the period

@risingEdgeInt, fallingEdgeInt, periodInt
	interrupt callback functions related to the event interrupts. In case not used, define them as empty functions. 
	Otherwise, these are executed in the SCT Interrupt context when the event generates the interrupt. 
	The interrupt does not need to be acknowledged (quit) within the callback function


Dynamic configuration:
----------------------

Using the SCT_pwmIoctl API the user can change (at runtime):

	- the duty cycle using the SET_DC command
	- the active interrupt mask using the ENABLE_INT command
	
	
