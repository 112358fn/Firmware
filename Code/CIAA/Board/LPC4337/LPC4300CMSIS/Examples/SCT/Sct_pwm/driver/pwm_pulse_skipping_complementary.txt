---------------------------
Description
---------------------------

Static configuration:
----------------------

the following is the parameter configuration to be used with this PWM

typedef struct PWM_pulseSkipOutputPair {
	
	SCT_OUT directOutput;
	SCT_OUT complementaryOutput;	
	
} PWM_pulseSkipOutputPair;

typedef struct PWM_pskipPhases {
	
	uint8_t 					numPhases;
	PWM_pulseSkipOutputPair* 	phasePairs; 
	
} PWM_pskipPhases;

typedef struct PWM_ComplementaryPulseSkipping {

	PWM_pskipPhases	pwmOutputs;				/* which outputs of type SCT_OUT should be steered */				
	SCT_IN 			asyncEnableInput; 		/* which input signal is used to enable / disable the outputs */	
	uint16_t  		interruptMask;			/* which interrupts should be active */	
	uint16_t 		dutyCycle;				/* value in percentage per mil (n/1000) */
	uint32_t 		period;					/* value in Hz */
	uint16_t		risingEdgeDeadband; 	/* dead band applied on rising edge */
	uint16_t		fallingEdgeDeadband;	/* dead band applied on rising edge */
	PWM_polarity	polarity;				/* active high or active low */
	intCallback_t	risingEdgeInt;			/* rising edge, falling edge, period event interrupt callbacks */
	intCallback_t	fallingEdgeInt;		
	intCallback_t	periodInt;			

} PWM_ComplementaryPulseSkipping;

@pwmOutputs
	defines which outputs shall be driven on each direct and complementary signal
	it is a structure including the number of signal pairs, and a pointer to an array 
	of substructures defining which outputs shall be considered in pairs

@asyncEnableInput
	defines which input signal is used to control the skipping of the PWM signals within a specific period	
	Disabling of the outputs is always synchronous with a period boundary

@interruptMask
	can take the values RISING_INT, FALLING_INT, PERIOD_INT or an OR combination of them

@ duty cycle
	is represented 'per mil', so 1000 represents 100% duty cycle, 500 represents 50%, 101 represents 
	10,1% and so on

@ period
	represents the base frequency in Herz at which the PWM is generated, i.e. the period frequency

@polarity
	defines if the PWM signal should start active high or low at the beginning of the period

@risingEdgeInt, fallingEdgeInt, periodInt
	interrupt callback functions related to the event interrupts. In case not used, define them as empty functions. 
	Otherwise, these are executed in the SCT Interrupt context when the event generates the interrupt. 
	The interrupt does not need to be acknowledged (quit) within the callback function


Dynamic configuration:
----------------------

Using the SCT_pwmIoctl API the user can change (at runtime):

	- the duty cycle using the SET_DC command
	- the active interrupt mask using the ENABLE_INT command
	
	
