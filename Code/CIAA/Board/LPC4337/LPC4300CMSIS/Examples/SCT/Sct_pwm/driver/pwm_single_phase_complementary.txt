---------------------------
Description
---------------------------

Static configuration:
----------------------

the following is the parameter configuration to be used with this PWM

typedef struct PWM_outputPair {
	
	SCT_OUT directOutput;
	SCT_OUT complementaryOutput;	
	
} PWM_outputPair;

typedef struct PWM_phases {
	
	uint8_t 			numPhases;
	PWM_outputPair* 	phasePairs; 
	
} PWM_phases;

typedef struct PWM_ComplementarySinglePhase {

	PWM_phases		pwmOutputs;		/* which outputs of type SCT_OUT should be steered */
	uint16_t  		interruptMask;	/* which interrupts should be active */	
	uint16_t 		dutyCycle;		/* value in percentage per mil (n/1000) */
	uint32_t 		period;			/* value in Hz */	
	PWM_polarity	polarity;		/* active high or active low */
	uint16_t		risingEdgeDeadband; 	/* dead band applied on rising edge */
	uint16_t		fallingEdgeDeadband;	/* dead band applied on falling edge */
	intCallback_t	risingEdgeInt;	/* rising edge event interrupt callback */
	intCallback_t	fallingEdgeInt;	/* falling edge event interrupt callback */
	intCallback_t	periodInt;		/* period event interrupt callback */	

} PWM_ComplementarySinglePhase;

@pwmOutputs
	defines which outputs shall be driven on each direct and complementary signal
	it is a structure including the number of signal pairs, and a pointer to an array 
	of substructures defining which outputs shall be considered in pairs

@interruptMask
	can take the values RISING_INT, FALLING_INT, PERIOD_INT or an OR combination of them

@ duty cycle
	is represented in per mil, so 1000 represents 100% duty cycle, 500 represents 50%, 101 represents 
	10,1% and so on

@ period
	represents the base frequency in Herz at which the PWM is generated, i.e. the period frequency

@polarity
	defines if the PWM signal should start active high or low at the beginning of the period

@risingEdgeDeadBand, fallingEdgeDeadBand
	risingEdgeDeadBand defines the amount of dead band which is inserted between the direct output being switched on / the
	complementary output being switched off when the rising edge event is fired (beginning of the period)
	fallingEdgeDeadBand defines the amount of dead band which is inserted between the direct output being switched off / the
	complementary output being switched on, when the falling edge event is fired
	These are expressed in timer ticks, so have to be calculated referring to the PWM frequency period (1/period)
	
@risingEdgeInt, fallingEdgeInt, periodInt
	interrupt callback functions related to the event interrupts. In case not used, define them as empty functions. 
	Otherwise, these are executed in the SCT Interrupt context when the event generates the interrupt. The interrupt does not need
	to be acknowledged (quit) within the callback function


Dynamic configuration:
----------------------

Using the SCT_pwmIoctl API the user can change (at runtime):

	- the duty cycle using the SET_DC command
	- the active interrupt mask using the ENABLE_INT command
	
	
