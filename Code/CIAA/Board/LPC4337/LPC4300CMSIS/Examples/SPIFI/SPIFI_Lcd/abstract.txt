/**********************************************************************
* $Id: abstract.txt 8763 2011-12-08 00:45:50Z nxp21346 $		abstract.txt		2011-12-07
*//**
* @file		abstract.txt
* @brief	Example description file
* @version	1.0
* @date		07. December. 2011
* @author	NXP MCU SW Application Team
*
* Copyright(C) 2011, NXP Semiconductor
* All rights reserved.
*
***********************************************************************
* Software that is described herein is for illustrative purposes only
* which provides customers with programming information regarding the
* products. This software is supplied "AS IS" without any warranties.
* NXP Semiconductors assumes no responsibility or liability for the
* use of the software, conveys no license or title under any patent,
* copyright, or mask work right to the product. NXP Semiconductors
* reserves the right to make changes in the software without
* notification. NXP Semiconductors also make no representation or
* warranty that such application will be suitable for the specified
* use without further testing or modification.
* Permission to use, copy, modify, and distribute this software and its
* documentation is hereby granted, under NXP Semiconductors'
* relevant copyright in the software, without fee, provided that it
* is used in conjunction with NXP Semiconductors microcontrollers.  This
* copyright, permission, and disclaimer notice must appear in all copies of
* this code.
**********************************************************************/
  
@Example description:
	Purpose:
		This example shows how to initialize the LCD interface to fetch data
        directly from the SPIFI (external QSPI Flash Interface)
		It also shows how to run the part at its maximum speed and support
		booting from external parallel Flash memory.
	Process:
		- Call routines (in RAM) to reconfigure the EMC and SPIFI
		  memory peripherals
		- Configure the chip to run at 204 MHz
		- Configure LCD board (using a bit-banged I2C interface)
		- Configure the LCD pins
        - Configure the LCD controller
        - In a timer interrupt, read an ADC and use it to set the LCD
          framebuffer pointer.
        - Note: For all toolchains, this example is dependent on a custom linker
          script file to place memory setup routines in internal SRAM.
        - Note2: This example has a special seperate target to program image data
          into external QSPI memory.
					
@Directory contents:
	\Keil:	includes Keil project and configuration files  
	lpc43xx_libcfg.h: Library configuration file - include needed driver library for this example 
	Lcd_Demo.c: Main program

@How to run:
	Hardware configuration:		
		This example was tested on:
			Hitex LPC4350 Board with Embedded Artists 7" TFT LCD display
						
	Running mode:
		RAM mode:   This example can be run on RAM mode with debugger. 
					All files must be build to .elf file, this file will be loaded into RAM through a 
					debugger tool before running 
		ROM mode: 	All files must be built to .hex file before burn into flash
			+ This example can be run on external flash:
				* SST39X320X:
					- Burn by Keil's Load feature:
						a) Copy all things in ..\..\..\Tools\Flash\SST39X320X\Keil to
						   C:\Keil\ARM\Flash (Keil uVision 4)
						b) Open Keil->Configure for flash compiling->Compile->Select debugger->Press LOAD 						


	Step to run:
		- Step 1: Choose "Program Image to Flash" target in Keil. Build example.
        - Step 2: Burn hex file into external QSPI flash using Keil download button
        - Step 3: Choose "Internal SRAM" or "Hitex Flash" target in Keil. Build example. (program if Flash)
		- Step 4: Run example and observe a rocket image on the 7" TFT display
        - Step 5: Adjust R26 on the Hitex board and notice that the image scrolls
		
@Tip:
	- Open \Keil\*.uvproj project file to run example on Keil