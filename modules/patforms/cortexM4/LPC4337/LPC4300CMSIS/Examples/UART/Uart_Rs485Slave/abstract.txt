/**********************************************************************
* $Id$		abstract.txt		2012-04-19
*//**
* @file		abstract.txt
* @brief	Example description file
* @version	1.1
* @date		19. Apr. 2012
* @author	NXP MCU SW Application Team
*
* Copyright(C) 2011, NXP Semiconductor
* All rights reserved.
*
***********************************************************************
* Software that is described herein is for illustrative purposes only
* which provides customers with programming information regarding the
* products. This software is supplied "AS IS" without any warranties.
* NXP Semiconductors assumes no responsibility or liability for the
* use of the software, conveys no license or title under any patent,
* copyright, or mask work right to the product. NXP Semiconductors
* reserves the right to make changes in the software without
* notification. NXP Semiconductors also make no representation or
* warranty that such application will be suitable for the specified
* use without further testing or modification.
* Permission to use, copy, modify, and distribute this software and its
* documentation is hereby granted, under NXP Semiconductors'
* relevant copyright in the software, without fee, provided that it
* is used in conjunction with NXP Semiconductors microcontrollers.  This
* copyright, permission, and disclaimer notice must appear in all copies of
* this code.
**********************************************************************/
  
@Example description:
	Purpose:
		This example describes how to use RS485 functionality on UART0 of LPC18XX
		in slave mode.
	Process:	
		RS485 function on UART0 acts as slave mode on RS485 bus.
		RS485 Slave device in this example can operate in separate mode
		as following:
			- Slave device always receives all frames on RS485 bus, regardless
			  data frame (9 bit mode with parity stick '0') or slave address
			  frame (9 bit mode with parity stick '1').
			- Slave device does not always receive all frames on RS485 bus. In this
			  case, only slave address frame can trigger an interrupt event,
			  then slave device can accept the following data frame by determine that
			  slave address frame is its own address or not(implemented by software).
			- Slave device is in auto slave address detection mode. In this mode,
			  only slave address frame with slave address value that matched with
			  pre-configured slave address will be accepted automatically (by hardware)
			  and trigger an interrupt callback event to handle following data frames.
				
@Directory contents:
	\Keil:	includes Keil project and configuration files
	\IAR:	includes IAR project and configuration files
	lpc43xx_libcfg.h: Library configuration file - include needed driver library for this example 
	Uart_Rs485Slave.c: Main program

@How to run:
	Hardware configuration:		
		This example was tested on:
			Hitex LPC4350EVA-A4-2 Board
			U-Link2 on Keil
			J-Link on IAR
	Boot mode jumper settings:
				+ Hitex Flash:
					Select boot mode jumpers [BOOT4,BOOT3,BOOT2,BOOT1] to [LOW,LOW,HIGH,HIGH]
				+ SPIFI quad SPI flash (SPIFI 64MB and 128MB):
					Select boot mode jumpers [BOOT4,BOOT3,BOOT2,BOOT1] to [LOW,LOW,LOW,HIGH]

				
		Serial display configuration: (e.g: TeraTerm, Hyperterminal, Flash Magic...) 
			– 115200bps 
			– 8 data bit 
			– No parity 
			– 1 stop bit 
			– No flow control 
				
		RS485 Connection:
		Pls see the 'Transceiver_Slave.png' in this directory for wiring information.				
	
	Running mode:
		On Keil
			Internal SRAM mode:	This example can run on Internal SRAM mode.
						All files must be build to .elf file, this file will be loaded into Internal SRAM through a
						debugger tool before running
			Hitex Flash mode: 	All files must be built to .hex file before burn into flash
				+ This example can be run on external flash:
					* SST39X320X:
						- Burn by Keil's Load feature:
							a) Copy all things in ..\..\..\Tools\Flash\Keil_Binaries to
							   C:\Keil\ARM\Flash (Keil uVision 4)
							b) Open Keil->Configure for flash compiling->Compile->Select debugger->Press LOAD 						
					SPIFI 64MB Debug mode:
				+ This example can be run on external SPIFI flash:
						- Burn by Keil's Load feature:
							a) Copy all things in ..\..\..\Tools\Flash\Keil_Binaries to
							   C:\Keil\ARM\Flash (Keil uVision 4)
							b) Open Keil->Configure for flash compiling->Compile->Select debugger->Press LOAD 
					SPIFI 128MB mode:
				+ This example can be run on external SPIFI flash:
						- Burn by Keil's Load feature:
							a) Copy all things in ..\..\..\Tools\Flash\Keil_Binaries to
							   C:\Keil\ARM\Flash (Keil uVision 4)
							b) Open Keil->Configure for flash compiling->Compile->Select debugger->Press LOADs 						

		On IAR
			Built the project (F7)
			Internal SRAM mode: This example can run on Internal SRAM.
				Download and debug (CTRL + D)
				Seclect Device Cortex M4 (if any)
			Hitex Flash mode: This example can run on 
				Hitex Flash (SST39X320X external parallel flash):
					Select "Project->Download->Download active application" to burn into flash
				SPIFI quad SPI flash 128MB mode:
					Select "Project->Download->Download active application" to burn into flash
				SPIFI quad SPI flash 64MB Debug mode:
					Download and debug (CTRL + D)
	Step to run:
		- Step 1: Build example.
		- Step 2: Burn hex file into board (if run on Hitex Flash mode)
		- Step 3: Connect UART1 port on this board to COM port on your computer
		- Step 4: Configure hardware and serial display as above instruction 
		- Step 5: Run example, use serial display to control UART0 as the guide on screen
		
@Tip:
	- Open \Keil\*.uvproj project file to run example on Keil
	- Open \EWARM\*.eww project file to run example on IAR
