/**********************************************************************
* $Id$		abstract.txt		2012-04-19
*//**
* @file		abstract.txt
* @brief	Example description file
* @version	1.1
* @date		19. Apr. 2012
* @author	NXP MCU SW Application Team
*
* Copyright(C) 2011, NXP Semiconductor
* All rights reserved.
*
***********************************************************************
* Software that is described herein is for illustrative purposes only
* which provides customers with programming information regarding the
* products. This software is supplied "AS IS" without any warranties.
* NXP Semiconductors assumes no responsibility or liability for the
* use of the software, conveys no license or title under any patent,
* copyright, or mask work right to the product. NXP Semiconductors
* reserves the right to make changes in the software without
* notification. NXP Semiconductors also make no representation or
* warranty that such application will be suitable for the specified
* use without further testing or modification.
* Permission to use, copy, modify, and distribute this software and its
* documentation is hereby granted, under NXP Semiconductors'
* relevant copyright in the software, without fee, provided that it
* is used in conjunction with NXP Semiconductors microcontrollers.  This
* copyright, permission, and disclaimer notice must appear in all copies of
* this code.
**********************************************************************/
  
@Example description:

	Purpose:

		This example describes how to:
		- use SCT to toggle its CTOUT pins when there is a timer match
		- define events based on SCT self generated outputs, used to switch states

	Process:

		Install the SCT tools from www.lpcware.com and read the user guide and the 
		getting started guide to understand how to use Fizzim for generating the SCT
		 C code file (and integrate it into an IDE, for example into Keil uVision).
		User guide and getting started guide are available within the SCt tools package.
		
		This example cycles through 5 different states, to toggle 4 SCT pins in the following sequence:
		
		toggle all - toggle one - toggle two - toggle 3 - toggle 4 - toggle all - ... 

		The H counter is used to switch between the states at a low frequency. This is done by generating
		a short pulse on an output, which is not needed off-chip but just internally as 
		an event source.

		The L counter is used within each state to toggle the output at a high frequency
			
		So the SCT configuration requires:

		   - 5 states: 1 entry state (used for toggling all pins), 4 other states for each separate CTOUTx pin toggling
		   - 4 SCT output pins

		Open the sct_simple_match.fzm for more detail, or look at the SCT configuration.png image
		
		use oscilloscope to monitor CTOUT[2,3,4,5].

		Note that on the Hitex board, you can set JP21 to see the SCT outputs toggling on the RGB led.
		It should generate an alternating white / green / blue / red light toggling at high frequency 
					
@Directory contents:

	includes Keil project and configuration files 
	sct_fsm.c: SCT configuration
	libcfg.h: Library configuration file - include needed driver library for this example 
	src\Sct_SimpleMatch.c: Main program
	SCT configuration.png: picture of the SCT state machine configuration

@How to run:
	Hardware configuration:		
		This example was tested on:
			HItex LPC4300 Board
	Running mode: This example can run on RAM, external parallel flash, and SPIFI quad SPI flash.

		RAM mode:	


		ROM mode: 	All files must be built to .hex file before burn into flash
		
			+ Copy all things in ..\..\..\Tools\Flash\Keil_Binaries to
				C:\Keil\ARM\Flash (Keil uVision 4)

			* SST39X320X:
				
				- Select boot mode jumpers BOOT[4..1] to [LOW,LOW,LOW,LOW]	
				- Burn flash using Keil load feature (load button)
				- Select boot mode jumpers BOOT[4..1] to [LOW,LOW,HIGH,HIGH] to boot from NOR flash
												
			* SPIFI 64Mb Flash
			 
			 	- Select boot mode jumpers BOOT[4..1] to [LOW,LOW,LOW,LOW]	
				- Burn flash using Keil load feature (load button)
				- Select boot mode jumpers BOOT[4..1] to [LOW,LOW,LOW,HIGH] to boot from SPIFI and reset 

	Step to run:
		- Step 1: Build example.
		- Step 2: Burn hex file into board (if run on Hitex Flash mode)
		- Step 3: Run example and observe CTOUT[2...5] signals on oscilloscope, or CTOUT[3,4,5] on RGB Led (set JP21)
		
@Tip:
	- Open *.uvproj project file to run example on Keil

